// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/farir1408/simple-calendar/internal/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Storage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteEvent(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvent provides a mock function with given fields: ctx, id
func (_m *Storage) GetEvent(ctx context.Context, id uint64) (types.Event, error) {
	ret := _m.Called(ctx, id)

	var r0 types.Event
	if rf, ok := ret.Get(0).(func(context.Context, uint64) types.Event); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(types.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveEvent provides a mock function with given fields: ctx, event
func (_m *Storage) SaveEvent(ctx context.Context, event types.Event) (uint64, error) {
	ret := _m.Called(ctx, event)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, types.Event) uint64); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, event
func (_m *Storage) UpdateEvent(ctx context.Context, event types.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
